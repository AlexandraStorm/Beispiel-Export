//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class matchitPlateletABEntities : DbContext
    {
        public matchitPlateletABEntities()
            : base("name=matchitPlateletABEntities")
        {
        }
        public matchitPlateletABEntities(string connstring)
                : base(connstring)
        {
        }
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tbAntibodyLot> tbAntibodyLot { get; set; }
        public virtual DbSet<tbAntibodyMethod> tbAntibodyMethod { get; set; }
        public virtual DbSet<tbPhenotypes> tbPhenotypes { get; set; }
        public virtual DbSet<tbAlleleProbeVals> tbAlleleProbeVals { get; set; }
        public virtual DbSet<tbAntibodyData> tbAntibodyData { get; set; }
        public virtual DbSet<tbAntibodyStats> tbAntibodyStats { get; set; }
        public virtual DbSet<tbPakLXDBVer> tbPakLXDBVer { get; set; }
    
        public virtual ObjectResult<GetPakLxProbeValues_Result> GetPakLxProbeValues(string logicName)
        {
            var logicNameParameter = logicName != null ?
                new ObjectParameter("logicName", logicName) :
                new ObjectParameter("logicName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPakLxProbeValues_Result>("GetPakLxProbeValues", logicNameParameter);
        }
    
        public virtual ObjectResult<GetSampleForLoad_Result> GetSampleForLoad(string batchID, string sampleID)
        {
            var batchIDParameter = batchID != null ?
                new ObjectParameter("batchID", batchID) :
                new ObjectParameter("batchID", typeof(string));
    
            var sampleIDParameter = sampleID != null ?
                new ObjectParameter("sampleID", sampleID) :
                new ObjectParameter("sampleID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSampleForLoad_Result>("GetSampleForLoad", batchIDParameter, sampleIDParameter);
        }
    }
}
